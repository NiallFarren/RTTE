@model RealTimeTextEditor.Models.Document


@{
    ViewBag.Title = "TextEditor";
}

<h2>TextEditor</h2>

<link rel="stylesheet" type="text/css" href="~/Content/quillStyles/quill.snow.css">
<link rel="stylesheet" type="text/css" href="~/Content/quillStyles/advanced.css">

<input type="submit" name="save_div" id="save_div" value="Save Contents">

<div id="info"> </div>
<br />

<div class="advanced-wrapper">
    <div class="toolbar-container">
        <span class="ql-format-group">
            <select title="Font" class="ql-font">
                <option value="sans-serif" selected>Sans Serif</option>
                <option value="Georgia, serif">Serif</option>
                <option value="Monaco, 'Courier New', monospace">Monospace</option>
            </select>
            <select title="Size" class="ql-size">
                <option value="10px">Small</option>
                <option value="13px" selected>Normal</option>
                <option value="18px">Large</option>
                <option value="32px">Huge</option>
            </select>
        </span><span class="ql-format-group"><span title="Bold" class="ql-format-button ql-bold"></span><span class="ql-format-separator"></span><span title="Italic" class="ql-format-button ql-italic"></span><span class="ql-format-separator"></span><span title="Underline" class="ql-format-button ql-underline"></span></span><span class="ql-format-group">
            <select title="Text Color" class="ql-color">
                <option value="rgb(0, 0, 0)" selected></option>
                <option value="rgb(230, 0, 0)"></option>
                <option value="rgb(255, 153, 0)"></option>
                <option value="rgb(255, 255, 0)"></option>
                <option value="rgb(0, 138, 0)"></option>
                <option value="rgb(0, 102, 204)"></option>
                <option value="rgb(153, 51, 255)"></option>
                <option value="rgb(255, 255, 255)"></option>
                <option value="rgb(250, 204, 204)"></option>
                <option value="rgb(255, 235, 204)"></option>
                <option value="rgb(255, 255, 204)"></option>
                <option value="rgb(204, 232, 204)"></option>
                <option value="rgb(204, 224, 245)"></option>
                <option value="rgb(235, 214, 255)"></option>
                <option value="rgb(187, 187, 187)"></option>
                <option value="rgb(240, 102, 102)"></option>
                <option value="rgb(255, 194, 102)"></option>
                <option value="rgb(255, 255, 102)"></option>
                <option value="rgb(102, 185, 102)"></option>
                <option value="rgb(102, 163, 224)"></option>
                <option value="rgb(194, 133, 255)"></option>
                <option value="rgb(136, 136, 136)"></option>
                <option value="rgb(161, 0, 0)"></option>
                <option value="rgb(178, 107, 0)"></option>
                <option value="rgb(178, 178, 0)"></option>
                <option value="rgb(0, 97, 0)"></option>
                <option value="rgb(0, 71, 178)"></option>
                <option value="rgb(107, 36, 178)"></option>
                <option value="rgb(68, 68, 68)"></option>
                <option value="rgb(92, 0, 0)"></option>
                <option value="rgb(102, 61, 0)"></option>
                <option value="rgb(102, 102, 0)"></option>
                <option value="rgb(0, 55, 0)"></option>
                <option value="rgb(0, 41, 102)"></option>
                <option value="rgb(61, 20, 102)"></option>
            </select><span class="ql-format-separator"></span>
            <select title="Background Color" class="ql-background">
                <option value="rgb(0, 0, 0)"></option>
                <option value="rgb(230, 0, 0)"></option>
                <option value="rgb(255, 153, 0)"></option>
                <option value="rgb(255, 255, 0)"></option>
                <option value="rgb(0, 138, 0)"></option>
                <option value="rgb(0, 102, 204)"></option>
                <option value="rgb(153, 51, 255)"></option>
                <option value="rgb(255, 255, 255)" selected></option>
                <option value="rgb(250, 204, 204)"></option>
                <option value="rgb(255, 235, 204)"></option>
                <option value="rgb(255, 255, 204)"></option>
                <option value="rgb(204, 232, 204)"></option>
                <option value="rgb(204, 224, 245)"></option>
                <option value="rgb(235, 214, 255)"></option>
                <option value="rgb(187, 187, 187)"></option>
                <option value="rgb(240, 102, 102)"></option>
                <option value="rgb(255, 194, 102)"></option>
                <option value="rgb(255, 255, 102)"></option>
                <option value="rgb(102, 185, 102)"></option>
                <option value="rgb(102, 163, 224)"></option>
                <option value="rgb(194, 133, 255)"></option>
                <option value="rgb(136, 136, 136)"></option>
                <option value="rgb(161, 0, 0)"></option>
                <option value="rgb(178, 107, 0)"></option>
                <option value="rgb(178, 178, 0)"></option>
                <option value="rgb(0, 97, 0)"></option>
                <option value="rgb(0, 71, 178)"></option>
                <option value="rgb(107, 36, 178)"></option>
                <option value="rgb(68, 68, 68)"></option>
                <option value="rgb(92, 0, 0)"></option>
                <option value="rgb(102, 61, 0)"></option>
                <option value="rgb(102, 102, 0)"></option>
                <option value="rgb(0, 55, 0)"></option>
                <option value="rgb(0, 41, 102)"></option>
                <option value="rgb(61, 20, 102)"></option>
            </select><span class="ql-format-separator"></span>
            <select title="Text Alignment" class="ql-align">
                <option value="left" selected></option>
                <option value="center"></option>
                <option value="right"></option>
                <option value="justify"></option>
            </select>
        </span><span class="ql-format-group"><span title="Link" class="ql-format-button ql-link"></span><span class="ql-format-separator"></span><span title="Image" class="ql-format-button ql-image"></span><span class="ql-format-separator"></span><span title="List" class="ql-format-button ql-list"></span></span>
    </div>
    <div class="editor-container"></div>
</div>



@section scripts {


    <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.js"></script>
    <script src="~/Scripts/quill.js"></script>


    <script>

    var _, advancedEditor, authorship, basicEditor, cursorManager;

    _ = Quill.require('lodash');


    advancedEditor = new Quill('.advanced-wrapper .editor-container', {
        modules: {
            'authorship': {
                authorId: 'advanced',
                enabled: true
            },
            'toolbar': {
                container: '.advanced-wrapper .toolbar-container'
            },
            'link-tooltip': true,
            'image-tooltip': true,
            'multi-cursor': true
        },
        styles: false,
        theme: 'snow'
    });

    authorship = advancedEditor.getModule('authorship');

    authorship.addAuthor('advanced', 'rgba(255,255,255,255)');

    cursorManager = advancedEditor.getModule('multi-cursor');

    cursorManager.setCursor('advanced', 0, 'advanced', 'rgba(255,153,51,0.9)');

    $(function () {

        // enable singalR logging in browser console
        $.connection.hub.logging = true;

        // Reference the auto-generated proxy for the hub.
        var textHub = $.connection.deltaHub;

        // Create a function that the hub can call back to update text editor.
        textHub.client.update = function (change) {
            // Update the change
            var update = JSON.parse(change);
            advancedEditor.updateContents(update);
        };

        // callback function to confirm save
        textHub.client.saved = function () {
            // show save confirmation in info div
            $('#info').text('Document Saved');
        };

        // callback function to load saved doc contents
        textHub.client.replace = function (contents) {
            var text = JSON.parse(contents);
            advancedEditor.setContents(text);
        }

        // signalr defaults to websocket; for long-polling, insert { transport: 'longPolling' } as start() argument
        $.connection.hub.start().done(function () {

            var filename = '@(Model.UserID)' + '@(Model.Title)';
            textHub.server.load(filename);

            advancedEditor.on('selection-change', function (range) {
                return console.info('advanced', 'selection', range);
            });

            advancedEditor.on('text-change', function (delta, source) {
                $('#info').text(' ');
                var sourceDelta, targetDelta;
                if (source === 'api') {
                    return;
                }
                console.info('advanced', 'text', delta, source);
                var message = JSON.stringify(delta);
                // all changes are sent to hub to be forwarded to other clients
                textHub.server.send(message);
            });

            $('#save_div').on("click", function (e) {

                $('#info').text('Saving...');
                var filename = '@(Model.UserID)' + '@(Model.Title)';
                var text = advancedEditor.getContents();
                var json = JSON.stringify(text);
                console.info('Got Contents: ', text);
                // calling save function on hub
                textHub.server.save(filename, json);
                e.preventDefault();

            });
        });
    });
    </script>
}






